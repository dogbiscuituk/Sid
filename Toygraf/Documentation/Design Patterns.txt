This project contains many examples of popular software design patterns. All of these, with the
singular exception of Model-View-Controller (not so much a pattern, more of a framework) are as
originally described in the GoF book, https://en.wikipedia.org/wiki/Design_Patterns.

    Command
	Composite
	Facade
    Interpreter
	Mediator
    Memento
    Model-View-Controller
    Observer
	Visitor

The following (incomplete) list illustrates a single instance of each of these in the project.

Command

All edits to the Graph and its Traces are performed through Command objects. For example, when a
trace (pen) colour is changed, the change is effected by the appropriate Controller creating a new
TracePenColourCommand, which is dispatched to be run by the the CommandProcessor (confusingly now
renamed GraphProxy, as the responsibilities of several design classes dovetailed during extended
development, and the final design only emerged when the dust setled). See the description of the
Memento pattern for more details about Command execution.

Composite

Where the Command thrives, CompositeCommand will usually be found. This is a kind of macro, which
combines the effects of two or more elementary Commands into a single action. On execution, or on
Redo, the individual component commands are run in sequence. When a CompositeCommand is popped off
the Undo stack, the subcommands are processed in reverse order, thus undoing the composite effect.
The list of component Commands in a CompositeCommand may include further CompositeCommands, nested
arbitrarily.

Facade

The CommandInterpreter supplies a facade interface, providing one method per available action: for
example, GraphChangePaperColour(), TraceChangePenColour(), and so on. This hides the details of the
command implementation from clients such as the Visual Studio themed Property Table (a PropertyGrid
control), which is not itself command pattern based, while retaining behind the scenes the full
command pattern implementation required to support unlimited Undo/Redo operations.

Interpreter

The project allows entry of mathematical formulae in a very freeform style, using for example Greek
letters, superscripts and subscripts, an extended set of mathematical symbols, and more. The Parser
has the responsibility of interpreting these Unicode formula strings, translating them into standard
System.Linq.Expression objects, which can then be graphed, differentiated, etc. The Precedence and
Associativity rules of the Parser are particularly interesting. See for example the article at
http://mycodehere.blogspot.com/2019/04/expression-parser-part-1-of-2.html

Mediator

The GraphProxy (nee CommandProcessor) acts as Mediator between the set of available commands, and
the various clients (Controller classes e.g. GraphPropertiesController, TracePropertiesController,
TraceController and PropertyGridController). One important decoupling it provided was that between
actually running a command, as most clients do, and simply noting its effects for the purposes of
Undo/Redo suppport. Such was the case with the original PropertyGridController, which bypassed the
command running mechanism in favour of modifying the model directly. This entire evolution is, of
course, A Long Story...

Memento

The effect of any property Command is to carry the new value to the object of interest, then set the
relevant property on that object to the new value, after taking a Memento of its previous value. In
this design, such a Command is its own inverse. For when pushed on to an Undo stack, popped back off
and re-run, its effect now is to restore the original value of the property (which it holds), after
taking another Memento, this time reading back the value it originally applied to the object. The
Command is now ready to be pushed on to a Redo stack, primed to perform its original edit once more.

Model-View-Controller

There is one Model per Graph, containing all its associated data. Controllers form a tree structure
at runtime, with the AppController at the root. These provide the interface between the Model and
the application's Views, which are mostly empty UI elements containing little beyond initialization
data for their controls.

Observer

Several UI elements can be interested in the same piece of data. For example, a TraceView in the
Legend needs to know when its Trace.PenColour changes. The TracePropertiesDialog also needs to
know this, and since it's not a modal dialog, both of these UI elements have the ability to change
the same data. By subscribing to the GraphController.PropertyChanged event, both TraceController
and TracePropertiesController become Observers of the Model data, and can update their associated
Views (TraceView and TracePropertiesDialog respectively) whenever there are relevant changes.

Visitor

The output of the Parser is a Linq expression tree. Several operations on this structure need to
traverse its tree structure. For example:

    Simplify() performs algebraic simplification by crawling along a traversal as it modifies the
	very nodes it's running over;

	AsString() converts an expression node by node into legible text;

	UsesTime() visits every node on the tree to determine whether it uses the Time function, and can
	therefore enable the media controls (play, pause, rewind etc).

Commands provide another sample application of the Visitor Pattern, as seen in this call stack:

    GraphPropertiesController.AxisColourChanged()
     \
      CommandProcessor.AxisColour = ColourController.GetColour();
       \
        CommandProcessor.Run(new GraphAxisColourCommand());
         \
          CommandProcessor.Redo(command)
           \
            Command.Do(graph) // <------- Visitor Pattern switcheroo here!
             \
              GraphAxisColourCommand.Run(graph)
               \
                PropertyCommand.SetValue(graph, value)
                 \
                  PropertyCommand.Set(GetItem(graph), value)

This final Set method is an invocation of the Action originally provided to the command constructor.
